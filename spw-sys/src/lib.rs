/* automatically generated by rust-bindgen 0.60.1 */
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Frame {
    pub w: u64,
    pub h: u64,
    pub c: u64,
    pub timestamp: u64,
    pub frame_id: u64,
    pub data: *mut ::std::os::raw::c_uchar,
}
pub type FrameCallback = ::std::option::Option<unsafe extern "C" fn(arg1: *mut Frame)>;
pub type Location = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn location_new(
        server_name: *const ::std::os::raw::c_char,
        device_id: ::std::os::raw::c_int,
    ) -> Location;
}
extern "C" {
    pub fn location_free(location: Location) -> ::std::os::raw::c_int;
}
pub type Acq = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn acq_new(location: Location, config_file_name: *const ::std::os::raw::c_char) -> Acq;
}
extern "C" {
    pub fn acq_free(acq: Acq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acq_create(acq: Acq) -> ::std::os::raw::c_int;
}
pub type Buffer = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn buffer_new(count: ::std::os::raw::c_int, acq: Acq) -> Buffer;
}
extern "C" {
    pub fn buffer_free(buf: Buffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn buffer_create(buf: Buffer) -> ::std::os::raw::c_int;
}
pub type Context = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn context_new() -> Context;
}
extern "C" {
    pub fn context_free(ctx: Context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn context_grab_frame_count(ctx: Context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn context_proc_frame_count(ctx: Context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn context_counter_reset(ctx: Context);
}
pub type Processing = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn processing_new(buf: Buffer, callback: FrameCallback, ctx: Context) -> Processing;
}
extern "C" {
    pub fn processing_free(proc_: Processing) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn processing_create(proc_: Processing) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn context_attach_processing(ctx: Context, proc_: Processing);
}
pub type AcqToBuf = *mut ::std::os::raw::c_void;
extern "C" {
    pub fn acq_to_buffer_new(acq: Acq, buf: Buffer, ctx: Context) -> AcqToBuf;
}
extern "C" {
    pub fn acq_to_buffer_free(atb: AcqToBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acq_to_buffer_create(atb: AcqToBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acq_to_buffer_grab(atb: AcqToBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acq_to_buffer_freeze(atb: AcqToBuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sleep_for_1s();
}
